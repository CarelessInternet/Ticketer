# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

# Run this to start the database and bot:
# docker compose --env-file ./.env.database.production.local --env-file ./.env.bot.production.local up -d

# Run this to deploy the commands:
# docker exec ticketer-bot sh -c "cd /src/apps/bot && pnpm commands:deploy:production"

# Run this to rebuild the images from scratch (useful after changes from the codebase):
# docker compose --env-file ./.env.database.production.local build --no-cache

# Run the following line to access the database's terminal and the line after to access the database (change username accordingly).
# docker exec -it ticketer-database bash
# mariadb -u USERNAME -p

services:
  database:
    container_name: ticketer-database
    image: mariadb:11
    restart: always
    healthcheck:
      test: ['CMD', 'healthcheck.sh', '--connect', '--innodb_initialized']
      interval: 10s
      retries: 3
      start_interval: 0s
      start_period: 10s
    networks:
      - ticketer-database-network
    volumes:
      - ticketer-database-data:/var/lib/mysql
    environment:
      - MARIADB_DATABASE=${DB_DATABASE}
      - MARIADB_USER=${DB_USER}
      - MARIADB_PASSWORD=${DB_PASSWORD}
      - MARIADB_RANDOM_ROOT_PASSWORD=true
    ports:
      - "3306:3306"
  # Sharding will take place in one container as it is not possible to use discord.js' ShardingManager
  # to orchestrate/utilise one container per shard (that I know of). It would create another manager in that container which
  # is not the effect we are going for. It seems like vertical scaling is currently the way to go.
  bot:
    container_name: ticketer-bot
    build:
      context: .
      dockerfile: ./apps/bot/Dockerfile
    image: ticketer-bot:3.0.0
    restart: unless-stopped
    networks:
      - ticketer-database-network
    depends_on:
      database:
        condition: service_healthy
    # Reads the file(s) and exposes the variables when running the container. Undefined files are not allowed.
    env_file:
      - .env.bot.production.local
      - .env.database.production.local
    # https://stackoverflow.com/a/64436008/12425926
    # Reads the environment variables at build time from a specified file
    # and also exposes them at container run-time when running "docker compose (--env-file)".
    environment:
      - NODE_ENV=production

# Important to make connections from the bot to the database work!
networks:
  ticketer-database-network:
    driver: bridge

volumes:
  ticketer-database-data:
