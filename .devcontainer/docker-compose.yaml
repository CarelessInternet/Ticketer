name: 'ticketer-development'

services:
  database:
    container_name: ticketer-development-database
    image: mariadb:11
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'healthcheck.sh', '--connect', '--innodb_initialized']
      interval: 10s
      retries: 3
      start_period: 30s
    volumes:
      - ticketer_development_database_data:/var/lib/mysql
    environment:
      MARIADB_DATABASE: "Ticketer"
      MARIADB_USER: "dev_container"
      MARIADB_PASSWORD: "12345678"
      MYSQL_TCP_PORT: 3307
      MARIADB_RANDOM_ROOT_PASSWORD: true
    networks:
      - ticketer_development_database_network

  # Update this to the name of the service you want to work with in your docker-compose.yml file
  bot:
    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer 
    # folder. Note that the path of the Dockerfile and context is relative to the *primary* 
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    container_name: ticketer-development-bot
    build:
      context: .
      dockerfile: ./bot/Dockerfile
    image: ticketer-bot:development
    restart: unless-stopped
    depends_on:
      database:
        condition: service_healthy
    volumes:
      # Update this to wherever you want VS Code to mount the folder of your project
      - ..:/workspaces:cached
    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"
    environment:
      NODE_ENV: "development"
      NEXT_TELEMETRY_DISABLED: 1
    networks:
      - ticketer_development_database_network

volumes:
  ticketer_development_database_data:

# Important to make connections from the bot to the database work!
networks:
  ticketer_development_database_network:
